// SPDX-FileCopyrightText: 2022 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

package collect

import (
	"archive/tar"
	"compress/gzip"
	"io"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/gardener/network-problem-detector/pkg/common"

	"github.com/spf13/cobra"
)

type runCollectCommand struct{}

func CreateRunCollectCmd() *cobra.Command {
	cc := &runCollectCommand{}
	cmd := &cobra.Command{
		Use:   "run-collect",
		Short: "server-side collect observations",
		Long:  `called by collect to tar record files with observations generated by both node and pod daemonsets`,
		RunE:  cc.run,
	}

	return cmd
}

func (cc *runCollectCommand) run(_ *cobra.Command, _ []string) error {
	filenames, err := cc.listFiles(common.PathOutputDir)
	if err != nil {
		return err
	}

	return createArchive(common.PathOutputDir, filenames, os.Stdout)
}

func (cc *runCollectCommand) listFiles(dir string) ([]string, error) {
	files, err := os.ReadDir(dir)
	if err != nil {
		return nil, err
	}
	var filenames []string
	for _, file := range files {
		if !file.IsDir() && strings.HasSuffix(file.Name(), ".records") {
			filenames = append(filenames, file.Name())
		}
	}
	return filenames, err
}

func createArchive(dir string, filenames []string, buf io.Writer) error {
	gw := gzip.NewWriter(buf)
	defer gw.Close()
	tw := tar.NewWriter(gw)
	defer tw.Close()

	for _, filename := range filenames {
		err := addFileToArchive(tw, path.Join(dir, filename))
		if err != nil {
			return err
		}
	}

	return nil
}

func addFileToArchive(tw *tar.Writer, filename string) error {
	file, err := os.Open(filepath.Clean(filename))
	if err != nil {
		return err
	}
	defer file.Close()

	info, err := file.Stat()
	if err != nil {
		return err
	}

	header, err := tar.FileInfoHeader(info, info.Name())
	if err != nil {
		return err
	}

	err = tw.WriteHeader(header)
	if err != nil {
		return err
	}

	_, err = io.Copy(tw, file)
	if err != nil {
		return err
	}

	return nil
}
